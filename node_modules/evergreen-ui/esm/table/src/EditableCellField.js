import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { memo, useRef, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { Textarea } from '../../textarea';
var EditableCellField = memo(function EditableCellField(props) {
  var getTargetRef = props.getTargetRef;

  var getTableBodyRef = function getTableBodyRef() {
    var ref = getTargetRef();
    if (!ref) return;

    while (ref) {
      var isTableBody = ref.hasAttribute('data-evergreen-table-body');

      if (isTableBody) {
        return ref;
      }

      if (ref.parentElement) {
        ref = ref.parentElement;
      } else {
        return null;
      }
    }

    return ref;
  };

  var latestAnimationFrame = useRef();
  var textareaRef = useRef();
  var tableBodyRef = useRef();

  var _useState = useState({
    top: 0,
    left: 0,
    height: 0,
    width: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      _useState2$ = _useState2[0],
      height = _useState2$.height,
      width = _useState2$.width,
      top = _useState2$.top,
      left = _useState2$.left,
      setDimensions = _useState2[1]; // Mirrors functionality of componentDidMount and componentWillUnmount.
  // Focus on mount


  useEffect(function () {
    update();
    var requestId = requestAnimationFrame(function () {
      if (textareaRef.current) {
        textareaRef.current.focus();
      }
    });
    return function () {
      cancelAnimationFrame(requestId);

      if (latestAnimationFrame.current) {
        cancelAnimationFrame(latestAnimationFrame.current);
      }

      props.onCancel();
    };
  }, []);

  var update = function update() {
    var getTargetRef = props.getTargetRef;
    var targetRef = getTargetRef();
    if (!targetRef) return;
    tableBodyRef.current = getTableBodyRef();

    var _targetRef$getBoundin = targetRef.getBoundingClientRect(),
        targetLeft = _targetRef$getBoundin.left,
        targetTop = _targetRef$getBoundin.top,
        targetHeight = _targetRef$getBoundin.height,
        targetWidth = _targetRef$getBoundin.width;

    var calculatedTop;

    if (tableBodyRef.current) {
      var bounds = tableBodyRef.current.getBoundingClientRect();
      calculatedTop = Math.min(Math.max(targetTop, bounds.top), bounds.bottom - targetHeight);
    } else {
      calculatedTop = targetTop;
    }

    setDimensions({
      top: calculatedTop,
      left: targetLeft,
      height: targetHeight,
      width: targetWidth
    });
    latestAnimationFrame.current = requestAnimationFrame(function () {
      return update();
    });
  };

  var handleFocus = function handleFocus(e) {
    e.target.selectionStart = e.target.value.length;
  };

  var handleBlur = function handleBlur() {
    if (textareaRef.current) props.onChangeComplete(textareaRef.current.value);
  };

  var handleKeyDown = function handleKeyDown(e) {
    switch (e.key) {
      case 'Escape':
        props.onCancel();
        if (textareaRef.current) textareaRef.current.blur();
        break;

      case 'Enter':
        if (textareaRef.current) textareaRef.current.blur();
        e.preventDefault();
        break;

      case 'Tab':
        if (textareaRef.current) textareaRef.current.blur();
        break;

      default:
        break;
    }
  };

  var size = props.size,
      value = props.value,
      _props$minWidth = props.minWidth,
      minWidth = _props$minWidth === void 0 ? 80 : _props$minWidth,
      _props$minHeight = props.minHeight,
      minHeight = _props$minHeight === void 0 ? 40 : _props$minHeight,
      zIndex = props.zIndex;
  return React.createElement(Textarea, {
    ref: textareaRef,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur,
    onFocus: handleFocus,
    appearance: "editable-cell",
    size: size,
    style: {
      left: left,
      top: top,
      height: height,
      minHeight: Math.max(height, minHeight),
      width: width,
      minWidth: Math.max(width, minWidth),
      zIndex: zIndex
    },
    height: null,
    width: null,
    minHeight: null,
    position: "fixed",
    defaultValue: value
  });
});
EditableCellField.propTypes = {
  /**
   * Used as the defaultValue of the textarea.
   */
  value: PropTypes.string.isRequired,

  /**
   * The z-index placed on the element.
   */
  zIndex: PropTypes.number.isRequired,

  /**
   * Function to get the target ref of the parent.
   * Used to mirror the position.
   */
  getTargetRef: PropTypes.func.isRequired,

  /**
   * Min width of the textarea.
   * The textarea can never be smaller than the cell.
   */
  minWidth: PropTypes.number,

  /**
   * Min height of the textarea.
   * The textarea can never be smaller than the cell.
   */
  minHeight: PropTypes.number,

  /**
   * Called when the textarea is blurred, pass the value back to the cell.
   */
  onChangeComplete: PropTypes.func.isRequired,

  /**
   * Called when Escape is hit or componentWillUnmount.
   */
  onCancel: PropTypes.func.isRequired,

  /**
   * Text size of the textarea.
   */
  size: PropTypes.number
};
export default EditableCellField;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,