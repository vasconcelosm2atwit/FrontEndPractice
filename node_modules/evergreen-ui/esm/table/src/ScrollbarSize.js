import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { memo, useRef, useState, useEffect } from 'react';
import PropTypes from 'prop-types';

var noop = function noop() {};

var ScrollbarSize = memo(function ScrollbarSize(_ref) {
  var _ref$handleScrollbarS = _ref.handleScrollbarSize,
      handleScrollbarSize = _ref$handleScrollbarS === void 0 ? noop : _ref$handleScrollbarS;
  var innerRef = useRef();
  var outerRef = useRef();

  var _useState = useState({
    innerWidth: null,
    outerWidth: null
  }),
      _useState2 = _slicedToArray(_useState, 2),
      widths = _useState2[0],
      setWidths = _useState2[1];

  useEffect(function () {
    var newWidths = {
      innerWidth: null,
      outerWidth: null
    };

    if (innerRef.current) {
      newWidths.innerWidth = innerRef.current.getBoundingClientRect().width;
    }

    if (outerRef.current) {
      newWidths.outerWidth = outerRef.current.getBoundingClientRect().width;
    }

    setWidths(newWidths);
  }, []);
  useEffect(function () {
    if (widths.innerWidth && widths.outerWidth) {
      handleScrollbarSize(widths.outerWidth - widths.innerWidth);
    }
  });
  return React.createElement("div", {
    ref: outerRef,
    "aria-hidden": true,
    style: {
      position: 'fixed',
      top: -500,
      left: -500,
      width: 100,
      overflowY: 'scroll'
    }
  }, React.createElement("div", {
    ref: innerRef
  }));
});
ScrollbarSize.propTypes = {
  /**
   * Returns the size of the scrollbar by creating a hidden fixed div.
   */
  handleScrollbarSize: PropTypes.func
};
export default ScrollbarSize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvU2Nyb2xsYmFyU2l6ZS5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIm1lbW8iLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIlByb3BUeXBlcyIsIm5vb3AiLCJTY3JvbGxiYXJTaXplIiwiaGFuZGxlU2Nyb2xsYmFyU2l6ZSIsImlubmVyUmVmIiwib3V0ZXJSZWYiLCJpbm5lcldpZHRoIiwib3V0ZXJXaWR0aCIsIndpZHRocyIsInNldFdpZHRocyIsIm5ld1dpZHRocyIsImN1cnJlbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIm92ZXJmbG93WSIsInByb3BUeXBlcyIsImZ1bmMiXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxJQUFoQixFQUFzQkMsTUFBdEIsRUFBOEJDLFFBQTlCLEVBQXdDQyxTQUF4QyxRQUF5RCxPQUF6RDtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7O0FBRUEsSUFBTUMsSUFBSSxHQUFHLFNBQVBBLElBQU8sR0FBTSxDQUFFLENBQXJCOztBQUVBLElBQU1DLGFBQWEsR0FBR04sSUFBSSxDQUFDLFNBQVNNLGFBQVQsT0FFeEI7QUFBQSxtQ0FEREMsbUJBQ0M7QUFBQSxNQUREQSxtQkFDQyxzQ0FEcUJGLElBQ3JCO0FBQ0QsTUFBTUcsUUFBUSxHQUFHUCxNQUFNLEVBQXZCO0FBQ0EsTUFBTVEsUUFBUSxHQUFHUixNQUFNLEVBQXZCOztBQUZDLGtCQUcyQkMsUUFBUSxDQUFDO0FBQUVRLElBQUFBLFVBQVUsRUFBRSxJQUFkO0FBQW9CQyxJQUFBQSxVQUFVLEVBQUU7QUFBaEMsR0FBRCxDQUhuQztBQUFBO0FBQUEsTUFHTUMsTUFITjtBQUFBLE1BR2NDLFNBSGQ7O0FBS0RWLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2QsUUFBTVcsU0FBUyxHQUFHO0FBQUVKLE1BQUFBLFVBQVUsRUFBRSxJQUFkO0FBQW9CQyxNQUFBQSxVQUFVLEVBQUU7QUFBaEMsS0FBbEI7O0FBRUEsUUFBSUgsUUFBUSxDQUFDTyxPQUFiLEVBQXNCO0FBQ3BCRCxNQUFBQSxTQUFTLENBQUNKLFVBQVYsR0FBdUJGLFFBQVEsQ0FBQ08sT0FBVCxDQUFpQkMscUJBQWpCLEdBQXlDQyxLQUFoRTtBQUNEOztBQUVELFFBQUlSLFFBQVEsQ0FBQ00sT0FBYixFQUFzQjtBQUNwQkQsTUFBQUEsU0FBUyxDQUFDSCxVQUFWLEdBQXVCRixRQUFRLENBQUNNLE9BQVQsQ0FBaUJDLHFCQUFqQixHQUF5Q0MsS0FBaEU7QUFDRDs7QUFFREosSUFBQUEsU0FBUyxDQUFDQyxTQUFELENBQVQ7QUFDRCxHQVpRLEVBWU4sRUFaTSxDQUFUO0FBY0FYLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2QsUUFBSVMsTUFBTSxDQUFDRixVQUFQLElBQXFCRSxNQUFNLENBQUNELFVBQWhDLEVBQTRDO0FBQzFDSixNQUFBQSxtQkFBbUIsQ0FBQ0ssTUFBTSxDQUFDRCxVQUFQLEdBQW9CQyxNQUFNLENBQUNGLFVBQTVCLENBQW5CO0FBQ0Q7QUFDRixHQUpRLENBQVQ7QUFNQSxTQUNFO0FBQ0UsSUFBQSxHQUFHLEVBQUVELFFBRFA7QUFFRSx1QkFGRjtBQUdFLElBQUEsS0FBSyxFQUFFO0FBQ0xTLE1BQUFBLFFBQVEsRUFBRSxPQURMO0FBRUxDLE1BQUFBLEdBQUcsRUFBRSxDQUFDLEdBRkQ7QUFHTEMsTUFBQUEsSUFBSSxFQUFFLENBQUMsR0FIRjtBQUlMSCxNQUFBQSxLQUFLLEVBQUUsR0FKRjtBQUtMSSxNQUFBQSxTQUFTLEVBQUU7QUFMTjtBQUhULEtBV0U7QUFBSyxJQUFBLEdBQUcsRUFBRWI7QUFBVixJQVhGLENBREY7QUFlRCxDQTFDeUIsQ0FBMUI7QUE0Q0FGLGFBQWEsQ0FBQ2dCLFNBQWQsR0FBMEI7QUFDeEI7OztBQUdBZixFQUFBQSxtQkFBbUIsRUFBRUgsU0FBUyxDQUFDbUI7QUFKUCxDQUExQjtBQU9BLGVBQWVqQixhQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgU2Nyb2xsYmFyU2l6ZSA9IG1lbW8oZnVuY3Rpb24gU2Nyb2xsYmFyU2l6ZSh7XG4gIGhhbmRsZVNjcm9sbGJhclNpemUgPSBub29wXG59KSB7XG4gIGNvbnN0IGlubmVyUmVmID0gdXNlUmVmKClcbiAgY29uc3Qgb3V0ZXJSZWYgPSB1c2VSZWYoKVxuICBjb25zdCBbd2lkdGhzLCBzZXRXaWR0aHNdID0gdXNlU3RhdGUoeyBpbm5lcldpZHRoOiBudWxsLCBvdXRlcldpZHRoOiBudWxsIH0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBuZXdXaWR0aHMgPSB7IGlubmVyV2lkdGg6IG51bGwsIG91dGVyV2lkdGg6IG51bGwgfVxuXG4gICAgaWYgKGlubmVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIG5ld1dpZHRocy5pbm5lcldpZHRoID0gaW5uZXJSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgIH1cblxuICAgIGlmIChvdXRlclJlZi5jdXJyZW50KSB7XG4gICAgICBuZXdXaWR0aHMub3V0ZXJXaWR0aCA9IG91dGVyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICB9XG5cbiAgICBzZXRXaWR0aHMobmV3V2lkdGhzKVxuICB9LCBbXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh3aWR0aHMuaW5uZXJXaWR0aCAmJiB3aWR0aHMub3V0ZXJXaWR0aCkge1xuICAgICAgaGFuZGxlU2Nyb2xsYmFyU2l6ZSh3aWR0aHMub3V0ZXJXaWR0aCAtIHdpZHRocy5pbm5lcldpZHRoKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHJlZj17b3V0ZXJSZWZ9XG4gICAgICBhcmlhLWhpZGRlblxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIHRvcDogLTUwMCxcbiAgICAgICAgbGVmdDogLTUwMCxcbiAgICAgICAgd2lkdGg6IDEwMCxcbiAgICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJ1xuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2IHJlZj17aW5uZXJSZWZ9IC8+XG4gICAgPC9kaXY+XG4gIClcbn0pXG5cblNjcm9sbGJhclNpemUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgc2Nyb2xsYmFyIGJ5IGNyZWF0aW5nIGEgaGlkZGVuIGZpeGVkIGRpdi5cbiAgICovXG4gIGhhbmRsZVNjcm9sbGJhclNpemU6IFByb3BUeXBlcy5mdW5jXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbGJhclNpemVcbiJdfQ==