import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState, memo, forwardRef } from 'react';
import { css } from 'glamor';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { Image } from '../../image';
import { Text } from '../../typography';
import { useTheme } from '../../theme';
import globalGetInitials from './utils/getInitials';
import globalHash from './utils/hash';
var isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style;
var initialsStyleClass = css({
  top: 0,
  position: 'absolute',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  lineHeight: 1
}).toString();

function getColorProps(_ref) {
  var isSolid = _ref.isSolid,
      theme = _ref.theme,
      color = _ref.color,
      name = _ref.name,
      propsHashValue = _ref.propsHashValue;

  if (color === 'automatic') {
    var hashValue = globalHash(propsHashValue || name);
    return theme.getAvatarProps({
      isSolid: isSolid,
      color: color,
      hashValue: hashValue
    });
  }

  return theme.getAvatarProps({
    isSolid: isSolid,
    color: color
  });
}

var Avatar = memo(forwardRef(function Avatar(props, ref) {
  var src = props.src,
      name = props.name,
      _props$size = props.size,
      size = _props$size === void 0 ? 24 : _props$size,
      _props$isSolid = props.isSolid,
      isSolid = _props$isSolid === void 0 ? false : _props$isSolid,
      _props$color = props.color,
      color = _props$color === void 0 ? 'automatic' : _props$color,
      _props$forceShowIniti = props.forceShowInitials,
      forceShowInitials = _props$forceShowIniti === void 0 ? false : _props$forceShowIniti,
      _props$sizeLimitOneCh = props.sizeLimitOneCharacter,
      sizeLimitOneCharacter = _props$sizeLimitOneCh === void 0 ? 20 : _props$sizeLimitOneCh,
      _props$getInitials = props.getInitials,
      getInitials = _props$getInitials === void 0 ? globalGetInitials : _props$getInitials,
      propsHashValue = props.hashValue,
      restProps = _objectWithoutProperties(props, ["src", "name", "size", "isSolid", "color", "forceShowInitials", "sizeLimitOneCharacter", "getInitials", "hashValue"]);

  var theme = useTheme();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      imageHasFailedLoading = _useState2[0],
      setImageHasFailedLoading = _useState2[1];

  var imageUnavailable = !src || imageHasFailedLoading;
  var colorProps = getColorProps({
    isSolid: isSolid,
    theme: theme,
    color: color,
    name: name,
    propsHashValue: propsHashValue
  });
  var initialsFontSize = "".concat(theme.getAvatarInitialsFontSize(size, sizeLimitOneCharacter), "px");
  var initials = getInitials(name);

  if (size <= sizeLimitOneCharacter) {
    initials = initials.substring(0, 1);
  }

  return React.createElement(Box, _extends({
    width: size,
    height: size,
    overflow: "hidden",
    borderRadius: 9999,
    position: "relative",
    display: "inline-flex",
    flexShrink: 0,
    justifyContent: "center",
    backgroundColor: colorProps.backgroundColor,
    title: name,
    ref: ref
  }, restProps), (imageUnavailable || forceShowInitials) && React.createElement(Text, {
    className: initialsStyleClass,
    fontSize: initialsFontSize,
    lineHeight: initialsFontSize,
    width: size,
    height: size,
    color: colorProps.color
  }, initials), !imageUnavailable && React.createElement(Image, {
    style: {
      objectFit: 'cover'
    } // Unsupported by ui-box directly
    ,
    width: isObjectFitSupported ? '100%' : 'auto' // Fallback to old behaviour on IE
    ,
    height: "100%",
    src: src,
    onError: function onError() {
      return setImageHasFailedLoading(true);
    }
  }));
}));
Avatar.propTypes = {
  /**
   * The src attribute of the image.
   * When it's not available, render initials instead.
   */
  src: PropTypes.string,

  /**
   * The size of the avatar.
   */
  size: PropTypes.number,

  /**
   * The name used for the initials and title attribute.
   */
  name: PropTypes.string,

  /**
   * The value used for the hash function.
   * The name is used as the hashValue by default.
   * When dealing with anonymous users you should use the id instead.
   */
  hashValue: PropTypes.string,

  /**
   * When true, render a solid avatar.
   */
  isSolid: PropTypes.bool,

  /**
   * The color used for the avatar.
   * When the value is `automatic`, use the hash function to determine the color.
   */
  color: PropTypes.string,

  /**
   * Function to get the initials based on the name.
   */
  getInitials: PropTypes.func,

  /**
   * When true, force show the initials.
   * This is useful in some cases when using Gravatar and transparent pngs.
   */
  forceShowInitials: PropTypes.bool,

  /**
   * When the size is smaller than this number, use a single initial for the avatar.
   */
  sizeLimitOneCharacter: PropTypes.number
};
export default Avatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,