import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { memo, useMemo, useRef, useState, useEffect, useCallback } from 'react';
import { css } from 'glamor';
import PropTypes from 'prop-types';
import { Transition } from 'react-transition-group';
import Box from 'ui-box';
import Alert from '../../alert/src/Alert';
var animationEasing = {
  deceleration: "cubic-bezier(0.0, 0.0, 0.2, 1)",
  acceleration: "cubic-bezier(0.4, 0.0, 1, 1)",
  spring: "cubic-bezier(0.175, 0.885, 0.320, 1.175)"
};
var ANIMATION_DURATION = 240;
var openAnimation = css.keyframes('openAnimation', {
  from: {
    opacity: 0,
    transform: 'translateY(-120%)'
  },
  to: {
    transform: 'translateY(0)'
  }
});
var closeAnimation = css.keyframes('closeAnimation', {
  from: {
    transform: 'scale(1)',
    opacity: 1
  },
  to: {
    transform: 'scale(0.9)',
    opacity: 0
  }
});
var animationStyles = css({
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  height: 0,
  transition: "all ".concat(ANIMATION_DURATION, "ms ").concat(animationEasing.deceleration),
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: "".concat(openAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.spring, " both")
  },
  '&[data-state="exiting"]': {
    animation: "".concat(closeAnimation, " 120ms ").concat(animationEasing.acceleration, " both")
  }
});
var Toast = memo(function Toast(props) {
  var duration = props.duration,
      onRemove = props.onRemove,
      isShownProp = props.isShown,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      zIndex = props.zIndex,
      title = props.title,
      children = props.children,
      hasCloseButton = props.hasCloseButton;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      isShown = _useState2[0],
      setIsShown = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      height = _useState4[0],
      setHeight = _useState4[1];

  var closeTimer = useRef(null);
  var clearCloseTimer = useCallback(function () {
    if (closeTimer.current) {
      clearTimeout(closeTimer.current);
      closeTimer.current = null;
    }
  });
  var close = useCallback(function () {
    clearCloseTimer();
    setIsShown(false);
  });
  var startCloseTimer = useCallback(function () {
    if (duration) {
      clearCloseTimer();
      closeTimer.current = setTimeout(function () {
        close();
      }, duration * 1000);
    }
  });
  useEffect(function () {
    startCloseTimer();
    return function () {
      clearCloseTimer();
    };
  }, []);
  useEffect(function () {
    if (isShownProp !== isShown && typeof isShownProp === 'boolean') {
      setIsShown(isShownProp);
    }
  }, [isShownProp]);
  var handleMouseEnter = useCallback(function () {
    return clearCloseTimer();
  });
  var handleMouseLeave = useCallback(function () {
    return startCloseTimer();
  });
  var onRef = useCallback(function (ref) {
    if (ref === null) return;

    var _ref$getBoundingClien = ref.getBoundingClientRect(),
        rectHeight = _ref$getBoundingClien.height;

    setHeight(rectHeight);
  });
  var styles = useMemo(function () {
    return {
      height: height,
      zIndex: zIndex,
      marginBottom: isShown ? 0 : -height
    };
  }, [isShown, height, zIndex]);
  return React.createElement(Transition, {
    appear: true,
    unmountOnExit: true,
    timeout: ANIMATION_DURATION,
    "in": isShown,
    onExited: onRemove
  }, function (state) {
    return React.createElement("div", {
      "data-state": state,
      className: animationStyles,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      style: styles
    }, React.createElement(Box, {
      ref: onRef,
      padding: 8
    }, React.createElement(Alert, {
      flexShrink: 0,
      appearance: "card",
      elevation: 3,
      intent: intent,
      title: title,
      isRemoveable: hasCloseButton,
      onRemove: close,
      pointerEvents: "all"
    }, children)));
  });
});
Toast.propTypes = {
  /**
   * The z-index of the toast.
   */
  zIndex: PropTypes.number,

  /**
   * Duration of the toast.
   */
  duration: PropTypes.number,

  /**
   * Function called when the toast is all the way closed.
   */
  onRemove: PropTypes.func,

  /**
   * The type of the alert.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),

  /**
   * The title of the alert.
   */
  title: PropTypes.node,

  /**
   * Description of the alert.
   */
  children: PropTypes.node,

  /**
   * When true, show a close icon button inside of the toast.
   */
  hasCloseButton: PropTypes.bool,

  /**
   * When false, will close the Toast and call onRemove when finished.
   */
  isShown: PropTypes.bool
};
export default Toast;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,