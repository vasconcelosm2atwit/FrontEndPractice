import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { memo, forwardRef, useCallback, useMemo } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { IconWrapper } from '../../icons/src/IconWrapper';
import { Pane } from '../../layers';
import { Text } from '../../typography';
import { useTheme } from '../../theme';
import safeInvoke from '../../lib/safe-invoke';

var noop = function noop() {};

var MenuItem = memo(forwardRef(function MenuItem(props, ref) {
  var _props$is = props.is,
      is = _props$is === void 0 ? 'div' : _props$is,
      children = props.children,
      _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      secondaryText = props.secondaryText,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      icon = props.icon,
      _props$onSelect = props.onSelect,
      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,
      onKeyPress = props.onKeyPress,
      disabled = props.disabled,
      passthroughProps = _objectWithoutProperties(props, ["is", "children", "appearance", "secondaryText", "intent", "icon", "onSelect", "onKeyPress", "disabled"]);

  var theme = useTheme();
  var handleClick = useCallback(function (event) {
    onSelect(event);
  }, [onSelect]);
  var handleKeyPress = useCallback(function (event) {
    if (event.key === 'Enter' || event.key === ' ') {
      onSelect(event);
      event.preventDefault();
    }

    safeInvoke(onKeyPress, event);
  }, [onSelect, onKeyPress]);
  var themedClassName = theme.getMenuItemClassName(appearance, 'none');
  var iconColor = intent === 'none' ? 'default' : intent;

  if (disabled) {
    iconColor = 'disabled';
  }

  var textColor = disabled ? theme.colors.icon.disabled : intent;
  var secondaryTextColor = disabled ? textColor : 'muted';
  var disabledProps = useMemo(function () {
    return disabled ? {
      backgroundColor: theme.colors.background.tint1,
      cursor: 'not-allowed',
      disabled: true,
      onClick: null,
      onKeyPress: null,
      tabIndex: -1,
      'aria-disabled': 'true',
      'data-isselectable': 'false'
    } : {};
  }, [disabled]);
  return React.createElement(Pane, _extends({
    is: is,
    role: "menuitem",
    className: themedClassName,
    onClick: handleClick,
    onKeyPress: handleKeyPress,
    height: icon ? 40 : 32,
    tabIndex: 0,
    "data-isselectable": "true",
    display: "flex",
    alignItems: "center",
    ref: ref
  }, disabledProps, passthroughProps), React.createElement(IconWrapper, {
    icon: icon,
    color: iconColor,
    marginLeft: 16,
    marginRight: -4,
    size: 16,
    flexShrink: 0
  }), React.createElement(Text, {
    color: textColor,
    marginLeft: 16,
    marginRight: 16,
    flex: 1
  }, children), secondaryText && React.createElement(Text, {
    marginRight: 16,
    color: secondaryTextColor
  }, secondaryText));
}));
MenuItem.propTypes = {
  /**
   * Element type to use for the menu item.
   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`
   */
  is: Box.propTypes.is,

  /**
   * Function that is called on click and enter/space keypress.
   */
  onSelect: PropTypes.func,

  /**
   * The Evergreen or custom icon before the label.
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * The children of the component.
   */
  children: PropTypes.node,

  /**
   * Secondary text shown on the right.
   */
  secondaryText: PropTypes.node,

  /**
   * The default theme only supports one default appearance.
   */
  appearance: PropTypes.string,

  /**
   * The intent of the menu item.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),

  /**
   * Callback to invoke onkeypress
   */
  onKeyPress: PropTypes.func,

  /**
   * Flag to indicate whether the menu item is disabled or not
   */
  disabled: PropTypes.bool
};
export default MenuItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,