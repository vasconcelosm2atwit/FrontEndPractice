import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _css;

import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { css } from 'glamor';
import cx from 'classnames';
import { Text } from '../../typography';
import { useTheme } from '../../theme';
var labelClass = css({
  display: 'flex',
  flex: 1,
  alignItems: 'center',
  justifyContent: 'center',
  position: 'relative'
});
var wrapperClass = css((_css = {
  position: 'relative',
  display: 'flex',
  flex: 1,
  cursor: 'pointer',
  marginLeft: '-1px'
}, _defineProperty(_css, ":first-child .".concat(labelClass), {
  borderTopLeftRadius: 3,
  borderBottomLeftRadius: 3
}), _defineProperty(_css, ":last-child .".concat(labelClass), {
  borderTopRightRadius: 3,
  borderBottomRightRadius: 3
}), _css));
var offscreenCss = css({
  overflow: 'hidden',
  position: 'absolute',
  height: '1px',
  width: '1px',
  padding: 0,
  margin: '-1px',
  border: 0,
  clip: 'rect(0 0 0 0)'
});
var SegmentedControlRadio = memo(forwardRef(function SegmentedControlRadio(props, ref) {
  var theme = useTheme();
  var id = props.id,
      name = props.name,
      label = props.label,
      value = props.value,
      height = props.height,
      checked = props.checked,
      _onChange = props.onChange,
      appearance = props.appearance,
      isFirstItem = props.isFirstItem,
      isLastItem = props.isLastItem,
      disabled = props.disabled;
  var themedClassName = theme.getSegmentedControlRadioClassName(appearance);
  var textSize = theme.getTextSizeForControlHeight(height);
  var borderRadius = theme.getBorderRadiusForControlHeight(height);
  return React.createElement(Box, _extends({
    ref: ref,
    className: cx(wrapperClass.toString(), themedClassName),
    "data-active": checked
  }, isFirstItem ? {
    borderTopLeftRadius: borderRadius,
    borderBottomLeftRadius: borderRadius
  } : {}, isLastItem ? {
    borderTopRightRadius: borderRadius,
    borderBottomRightRadius: borderRadius
  } : {}), React.createElement("input", {
    type: "radio",
    id: id,
    className: "".concat(offscreenCss),
    name: name,
    value: value,
    checked: checked,
    onChange: function onChange(e) {
      return _onChange(e.target.value);
    },
    disabled: disabled
  }), React.createElement(Text, {
    is: "label",
    cursor: "pointer",
    htmlFor: id,
    fontWeight: 500,
    size: textSize,
    className: "".concat(labelClass),
    disabled: disabled
  }, label));
}));
SegmentedControlRadio.propTypes = {
  /**
   * The name attribute of the radio input.
   */
  name: PropTypes.string.isRequired,

  /**
   * The label used for the radio.
   */
  label: PropTypes.node.isRequired,

  /**
   * The value attribute of the radio input.
   */
  value: PropTypes.string.isRequired,

  /**
   * The height of the control.
   */
  height: PropTypes.number.isRequired,

  /**
   * When true, the radio input is checked.
   */
  checked: PropTypes.bool.isRequired,

  /**
   * Function called when the state changes.
   */
  onChange: PropTypes.func.isRequired,

  /**
   * The appearance of the control. Currently only `default` is possible.
   */
  appearance: PropTypes.string.isRequired,

  /**
   * When true, this item is the first item.
   */
  isFirstItem: PropTypes.bool,

  /**
   * When true, this item is the last item.
   */
  isLastItem: PropTypes.bool,

  /**
   * The unique id of the radio option.
   */
  id: PropTypes.string,

  /**
   * When true, the input is disabled.
   */
  disabled: PropTypes.bool
};
export default SegmentedControlRadio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWdtZW50ZWQtY29udHJvbC9zcmMvU2VnbWVudGVkQ29udHJvbFJhZGlvLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsImZvcndhcmRSZWYiLCJQcm9wVHlwZXMiLCJCb3giLCJjc3MiLCJjeCIsIlRleHQiLCJ1c2VUaGVtZSIsImxhYmVsQ2xhc3MiLCJkaXNwbGF5IiwiZmxleCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInBvc2l0aW9uIiwid3JhcHBlckNsYXNzIiwiY3Vyc29yIiwibWFyZ2luTGVmdCIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsIm9mZnNjcmVlbkNzcyIsIm92ZXJmbG93IiwiaGVpZ2h0Iiwid2lkdGgiLCJwYWRkaW5nIiwibWFyZ2luIiwiYm9yZGVyIiwiY2xpcCIsIlNlZ21lbnRlZENvbnRyb2xSYWRpbyIsInByb3BzIiwicmVmIiwidGhlbWUiLCJpZCIsIm5hbWUiLCJsYWJlbCIsInZhbHVlIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwiYXBwZWFyYW5jZSIsImlzRmlyc3RJdGVtIiwiaXNMYXN0SXRlbSIsImRpc2FibGVkIiwidGhlbWVkQ2xhc3NOYW1lIiwiZ2V0U2VnbWVudGVkQ29udHJvbFJhZGlvQ2xhc3NOYW1lIiwidGV4dFNpemUiLCJnZXRUZXh0U2l6ZUZvckNvbnRyb2xIZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJnZXRCb3JkZXJSYWRpdXNGb3JDb250cm9sSGVpZ2h0IiwidG9TdHJpbmciLCJlIiwidGFyZ2V0IiwicHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm5vZGUiLCJudW1iZXIiLCJib29sIiwiZnVuYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxJQUFoQixFQUFzQkMsVUFBdEIsUUFBd0MsT0FB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LENBQUNtRCxNQUFWLENBQWlCQyxVQUpTOztBQU1oQzs7O0FBR0FuQixFQUFBQSxLQUFLLEVBQUVqQyxTQUFTLENBQUNxRCxJQUFWLENBQWVELFVBVFU7O0FBV2hDOzs7QUFHQWxCLEVBQUFBLEtBQUssRUFBRWxDLFNBQVMsQ0FBQ21ELE1BQVYsQ0FBaUJDLFVBZFE7O0FBZ0JoQzs7O0FBR0EvQixFQUFBQSxNQUFNLEVBQUVyQixTQUFTLENBQUNzRCxNQUFWLENBQWlCRixVQW5CTzs7QUFxQmhDOzs7QUFHQWpCLEVBQUFBLE9BQU8sRUFBRW5DLFNBQVMsQ0FBQ3VELElBQVYsQ0FBZUgsVUF4QlE7O0FBMEJoQzs7O0FBR0FoQixFQUFBQSxRQUFRLEVBQUVwQyxTQUFTLENBQUN3RCxJQUFWLENBQWVKLFVBN0JPOztBQStCaEM7OztBQUdBZixFQUFBQSxVQUFVLEVBQUVyQyxTQUFTLENBQUNtRCxNQUFWLENBQWlCQyxVQWxDRzs7QUFvQ2hDOzs7QUFHQWQsRUFBQUEsV0FBVyxFQUFFdEMsU0FBUyxDQUFDdUQsSUF2Q1M7O0FBeUNoQzs7O0FBR0FoQixFQUFBQSxVQUFVLEVBQUV2QyxTQUFTLENBQUN1RCxJQTVDVTs7QUE4Q2hDOzs7QUFHQXhCLEVBQUFBLEVBQUUsRUFBRS9CLFNBQVMsQ0FBQ21ELE1BakRrQjs7QUFtRGhDOzs7QUFHQVgsRUFBQUEsUUFBUSxFQUFFeEMsU0FBUyxDQUFDdUQ7QUF0RFksQ0FBbEM7QUF5REEsZUFBZTVCLHFCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3ggZnJvbSAndWktYm94J1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJ1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSAnLi4vLi4vdGhlbWUnXG5cbmNvbnN0IGxhYmVsQ2xhc3MgPSBjc3Moe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXg6IDEsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59KVxuXG5jb25zdCB3cmFwcGVyQ2xhc3MgPSBjc3Moe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4OiAxLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgbWFyZ2luTGVmdDogJy0xcHgnLFxuICBbYDpmaXJzdC1jaGlsZCAuJHtsYWJlbENsYXNzfWBdOiB7XG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogMyxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAzXG4gIH0sXG4gIFtgOmxhc3QtY2hpbGQgLiR7bGFiZWxDbGFzc31gXToge1xuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAzLFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAzXG4gIH1cbn0pXG5cbmNvbnN0IG9mZnNjcmVlbkNzcyA9IGNzcyh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGhlaWdodDogJzFweCcsXG4gIHdpZHRoOiAnMXB4JyxcbiAgcGFkZGluZzogMCxcbiAgbWFyZ2luOiAnLTFweCcsXG4gIGJvcmRlcjogMCxcbiAgY2xpcDogJ3JlY3QoMCAwIDAgMCknXG59KVxuXG5jb25zdCBTZWdtZW50ZWRDb250cm9sUmFkaW8gPSBtZW1vKFxuICBmb3J3YXJkUmVmKGZ1bmN0aW9uIFNlZ21lbnRlZENvbnRyb2xSYWRpbyhwcm9wcywgcmVmKSB7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpXG5cbiAgICBjb25zdCB7XG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBsYWJlbCxcbiAgICAgIHZhbHVlLFxuICAgICAgaGVpZ2h0LFxuICAgICAgY2hlY2tlZCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgYXBwZWFyYW5jZSxcbiAgICAgIGlzRmlyc3RJdGVtLFxuICAgICAgaXNMYXN0SXRlbSxcbiAgICAgIGRpc2FibGVkXG4gICAgfSA9IHByb3BzXG5cbiAgICBjb25zdCB0aGVtZWRDbGFzc05hbWUgPSB0aGVtZS5nZXRTZWdtZW50ZWRDb250cm9sUmFkaW9DbGFzc05hbWUoYXBwZWFyYW5jZSlcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IHRoZW1lLmdldFRleHRTaXplRm9yQ29udHJvbEhlaWdodChoZWlnaHQpXG4gICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdGhlbWUuZ2V0Qm9yZGVyUmFkaXVzRm9yQ29udHJvbEhlaWdodChoZWlnaHQpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgY2xhc3NOYW1lPXtjeCh3cmFwcGVyQ2xhc3MudG9TdHJpbmcoKSwgdGhlbWVkQ2xhc3NOYW1lKX1cbiAgICAgICAgZGF0YS1hY3RpdmU9e2NoZWNrZWR9XG4gICAgICAgIHsuLi4oaXNGaXJzdEl0ZW1cbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHt9KX1cbiAgICAgICAgey4uLihpc0xhc3RJdGVtXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHt9KX1cbiAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgY2xhc3NOYW1lPXtgJHtvZmZzY3JlZW5Dc3N9YH1cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICBjaGVja2VkPXtjaGVja2VkfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IG9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIC8+XG4gICAgICAgIDxUZXh0XG4gICAgICAgICAgaXM9XCJsYWJlbFwiXG4gICAgICAgICAgY3Vyc29yPVwicG9pbnRlclwiXG4gICAgICAgICAgaHRtbEZvcj17aWR9XG4gICAgICAgICAgZm9udFdlaWdodD17NTAwfVxuICAgICAgICAgIHNpemU9e3RleHRTaXplfVxuICAgICAgICAgIGNsYXNzTmFtZT17YCR7bGFiZWxDbGFzc31gfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgPlxuICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9Cb3g+XG4gICAgKVxuICB9KVxuKVxuXG5TZWdtZW50ZWRDb250cm9sUmFkaW8ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG5hbWUgYXR0cmlidXRlIG9mIHRoZSByYWRpbyBpbnB1dC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGxhYmVsIHVzZWQgZm9yIHRoZSByYWRpby5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgYXR0cmlidXRlIG9mIHRoZSByYWRpbyBpbnB1dC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIGNvbnRyb2wuXG4gICAqL1xuICBoZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgcmFkaW8gaW5wdXQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBzdGF0ZSBjaGFuZ2VzLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBhcHBlYXJhbmNlIG9mIHRoZSBjb250cm9sLiBDdXJyZW50bHkgb25seSBgZGVmYXVsdGAgaXMgcG9zc2libGUuXG4gICAqL1xuICBhcHBlYXJhbmNlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhpcyBpdGVtIGlzIHRoZSBmaXJzdCBpdGVtLlxuICAgKi9cbiAgaXNGaXJzdEl0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoaXMgaXRlbSBpcyB0aGUgbGFzdCBpdGVtLlxuICAgKi9cbiAgaXNMYXN0SXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWQgb2YgdGhlIHJhZGlvIG9wdGlvbi5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBpbnB1dCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWdtZW50ZWRDb250cm9sUmFkaW9cbiJdfQ==