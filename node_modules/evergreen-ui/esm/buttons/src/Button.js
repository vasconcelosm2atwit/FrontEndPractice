import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { dimensions, spacing, position, layout } from 'ui-box';
import { IconWrapper } from '../../icons/src/IconWrapper';
import { Text } from '../../typography';
import { Spinner } from '../../spinner';
import { useTheme } from '../../theme';
/* eslint-disable-next-line react/prop-types */

var ButtonIcon = memo(function ButtonIcon(_ref) {
  var icon = _ref.icon,
      size = _ref.size,
      spacing = _ref.spacing,
      edge = _ref.edge;
  if (!icon) return null;
  var edgeMargin = -Math.round(spacing * 0.2);
  var innerMargin = Math.round(size * 0.7);
  var marginLeft = edge === 'start' ? edgeMargin : innerMargin;
  var marginRight = edge === 'end' ? edgeMargin : innerMargin;
  return React.createElement(IconWrapper, {
    icon: icon,
    size: size,
    marginLeft: marginLeft,
    marginRight: marginRight
  });
});
var styles = {
  position: 'relative',
  fontFamily: 'ui',
  fontWeight: 500,
  display: 'inline-flex',
  alignItems: 'center',
  flexWrap: 'nowrap'
};
var Button = memo(forwardRef(function Button(props, ref) {
  var theme = useTheme();

  var className = props.className,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      _props$height = props.height,
      height = _props$height === void 0 ? 32 : _props$height,
      _props$isActive = props.isActive,
      isActive = _props$isActive === void 0 ? false : _props$isActive,
      children = props.children,
      disabled = props.disabled,
      _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      isLoading = props.isLoading,
      paddingRight = props.paddingRight,
      paddingLeft = props.paddingLeft,
      _props$paddingTop = props.paddingTop,
      paddingTop = _props$paddingTop === void 0 ? 0 : _props$paddingTop,
      _props$paddingBottom = props.paddingBottom,
      paddingBottom = _props$paddingBottom === void 0 ? 0 : _props$paddingBottom,
      iconBefore = props.iconBefore,
      iconAfter = props.iconAfter,
      restProps = _objectWithoutProperties(props, ["className", "intent", "height", "isActive", "children", "disabled", "appearance", "isLoading", "paddingRight", "paddingLeft", "paddingTop", "paddingBottom", "iconBefore", "iconAfter"]);

  var themedClassName = theme.getButtonClassName(appearance, intent);
  var textSize = theme.getTextSizeForControlHeight(height);
  var borderRadius = theme.getBorderRadiusForControlHeight(height);
  var iconSize = theme.getIconSizeForButton(height);
  var padding = Math.round(height / 2);
  var pr = paddingRight !== undefined ? paddingRight : padding; // eslint-disable-line no-negated-condition

  var pl = paddingLeft !== undefined ? paddingLeft : padding; // eslint-disable-line no-negated-condition

  return React.createElement(Text, _extends({
    is: "button",
    ref: ref,
    className: cx(themedClassName, className),
    borderTopRightRadius: borderRadius,
    borderBottomRightRadius: borderRadius,
    borderTopLeftRadius: borderRadius,
    borderBottomLeftRadius: borderRadius,
    paddingTop: paddingTop,
    paddingBottom: paddingBottom,
    paddingRight: pr,
    paddingLeft: pl,
    marginLeft: 0 // Removes weird margins in Safari
    ,
    marginRight: 0 // Removes weird margins in Safari
    ,
    marginTop: 0 // Removes weird margins in Safari
    ,
    marginBottom: 0 // Removes weird margins in Safari
    ,
    size: textSize,
    color: null // Prevent the Text color overriding the glamor appearanceStyle color
    ,
    height: height,
    lineHeight: "".concat(height, "px")
  }, isActive ? {
    'data-active': true
  } : {}, styles, restProps, {
    disabled: disabled || isLoading
  }), isLoading && React.createElement(Spinner, {
    marginLeft: -Math.round(height / 8),
    marginRight: Math.round(height / 4),
    size: Math.round(height / 2)
  }), React.createElement(ButtonIcon, {
    icon: iconBefore,
    size: iconSize,
    spacing: pl,
    edge: "start"
  }), children, React.createElement(ButtonIcon, {
    icon: iconAfter,
    size: iconSize,
    spacing: pr,
    edge: "end"
  }));
}));
Button.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {
  /**
   * The intent of the button.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),

  /**
   * The appearance of the button.
   */
  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),

  /**
   * When true, show a loading spinner before the children.
   * This also disables the button.
   */
  isLoading: PropTypes.bool,

  /**
   * Forcefully set the active state of a button.
   * Useful in conjuction with a Popover.
   */
  isActive: PropTypes.bool,

  /**
   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.
   */
  iconBefore: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.
   */
  iconAfter: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * When true, the button is disabled.
   * isLoading also sets the button to disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
});
export default Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,