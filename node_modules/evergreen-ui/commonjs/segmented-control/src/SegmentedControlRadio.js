"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireDefault(require("ui-box"));

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _typography = require("../../typography");

var _theme = require("../../theme");

var _css;

var labelClass = (0, _glamor.css)({
  display: 'flex',
  flex: 1,
  alignItems: 'center',
  justifyContent: 'center',
  position: 'relative'
});
var wrapperClass = (0, _glamor.css)((_css = {
  position: 'relative',
  display: 'flex',
  flex: 1,
  cursor: 'pointer',
  marginLeft: '-1px'
}, (0, _defineProperty2["default"])(_css, ":first-child .".concat(labelClass), {
  borderTopLeftRadius: 3,
  borderBottomLeftRadius: 3
}), (0, _defineProperty2["default"])(_css, ":last-child .".concat(labelClass), {
  borderTopRightRadius: 3,
  borderBottomRightRadius: 3
}), _css));
var offscreenCss = (0, _glamor.css)({
  overflow: 'hidden',
  position: 'absolute',
  height: '1px',
  width: '1px',
  padding: 0,
  margin: '-1px',
  border: 0,
  clip: 'rect(0 0 0 0)'
});
var SegmentedControlRadio = (0, _react.memo)((0, _react.forwardRef)(function SegmentedControlRadio(props, ref) {
  var theme = (0, _theme.useTheme)();
  var id = props.id,
      name = props.name,
      label = props.label,
      value = props.value,
      height = props.height,
      checked = props.checked,
      _onChange = props.onChange,
      appearance = props.appearance,
      isFirstItem = props.isFirstItem,
      isLastItem = props.isLastItem,
      disabled = props.disabled;
  var themedClassName = theme.getSegmentedControlRadioClassName(appearance);
  var textSize = theme.getTextSizeForControlHeight(height);
  var borderRadius = theme.getBorderRadiusForControlHeight(height);
  return _react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    ref: ref,
    className: (0, _classnames["default"])(wrapperClass.toString(), themedClassName),
    "data-active": checked
  }, isFirstItem ? {
    borderTopLeftRadius: borderRadius,
    borderBottomLeftRadius: borderRadius
  } : {}, isLastItem ? {
    borderTopRightRadius: borderRadius,
    borderBottomRightRadius: borderRadius
  } : {}), _react["default"].createElement("input", {
    type: "radio",
    id: id,
    className: "".concat(offscreenCss),
    name: name,
    value: value,
    checked: checked,
    onChange: function onChange(e) {
      return _onChange(e.target.value);
    },
    disabled: disabled
  }), _react["default"].createElement(_typography.Text, {
    is: "label",
    cursor: "pointer",
    htmlFor: id,
    fontWeight: 500,
    size: textSize,
    className: "".concat(labelClass),
    disabled: disabled
  }, label));
}));
SegmentedControlRadio.propTypes = {
  /**
   * The name attribute of the radio input.
   */
  name: _propTypes["default"].string.isRequired,

  /**
   * The label used for the radio.
   */
  label: _propTypes["default"].node.isRequired,

  /**
   * The value attribute of the radio input.
   */
  value: _propTypes["default"].string.isRequired,

  /**
   * The height of the control.
   */
  height: _propTypes["default"].number.isRequired,

  /**
   * When true, the radio input is checked.
   */
  checked: _propTypes["default"].bool.isRequired,

  /**
   * Function called when the state changes.
   */
  onChange: _propTypes["default"].func.isRequired,

  /**
   * The appearance of the control. Currently only `default` is possible.
   */
  appearance: _propTypes["default"].string.isRequired,

  /**
   * When true, this item is the first item.
   */
  isFirstItem: _propTypes["default"].bool,

  /**
   * When true, this item is the last item.
   */
  isLastItem: _propTypes["default"].bool,

  /**
   * The unique id of the radio option.
   */
  id: _propTypes["default"].string,

  /**
   * When true, the input is disabled.
   */
  disabled: _propTypes["default"].bool
};
var _default = SegmentedControlRadio;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,