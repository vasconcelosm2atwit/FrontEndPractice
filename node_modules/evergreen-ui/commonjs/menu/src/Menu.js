"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _layers = require("../../layers");

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var _MenuDivider = _interopRequireDefault(require("./MenuDivider"));

var _MenuGroup = _interopRequireDefault(require("./MenuGroup"));

var _MenuOption = _interopRequireDefault(require("./MenuOption"));

var _MenuOptionsGroup = _interopRequireDefault(require("./MenuOptionsGroup"));

var Menu = (0, _react.memo)(function Menu(props) {
  var menuRef = (0, _react.useRef)(null);
  var firstItem = (0, _react.useRef)();
  var lastItem = (0, _react.useRef)();
  var menuItems = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    var currentMenuRef = menuRef.current;
    menuItems.current = currentMenuRef ? (0, _toConsumableArray2["default"])(currentMenuRef.querySelectorAll('[role="menuitemradio"]:not([disabled]), [role="menuitem"]:not([disabled])')) : [];

    if (menuItems.current.length === 0) {
      throw new Error('The menu has no menu items');
    }

    firstItem.current = menuItems.current[0];
    lastItem.current = menuItems.current[menuItems.current.length - 1]; // Go to next/previous item if it exists
    // or loop around

    var focusNext = function focusNext(currentItem, startItem) {
      // Determine which item is the startItem (first or last)
      var goingDown = startItem === firstItem.current; // Helper function for getting next legitimate element

      var move = function move(elem) {
        var indexOfItem = menuItems.current.indexOf(elem);

        if (goingDown) {
          if (indexOfItem < menuItems.current.length - 1) {
            return menuItems.current[indexOfItem + 1];
          }

          return startItem;
        }

        if (indexOfItem - 1 > -1) {
          return menuItems.current[indexOfItem - 1];
        }

        return startItem;
      }; // Make first move


      var nextItem = move(currentItem); // Focus the first one that's not disabled

      nextItem.focus();
    };

    function onKeyPressListener(e) {
      var target = e.target;
      var menuItem = menuItems.current && menuItems.current.find(function (item) {
        return item === target;
      });

      if (!menuItem) {
        return;
      }

      if (e.key === 'ArrowDown') {
        e.preventDefault();
        focusNext(menuItem, firstItem.current);
      }

      if (e.key === 'ArrowUp') {
        e.preventDefault();
        focusNext(menuItem, lastItem.current);
      }

      if (e.key === 'Home') {
        e.preventDefault();
        firstItem.current.focus();
      }

      if (e.key === 'End') {
        e.preventDefault();
        lastItem.current.focus();
      }
    }

    currentMenuRef.addEventListener('keydown', onKeyPressListener);
    return function () {
      currentMenuRef.removeEventListener('keydown', onKeyPressListener);
    };
  }, [menuRef]);
  var children = props.children;
  return _react["default"].createElement(_layers.Pane, {
    is: "nav",
    ref: menuRef,
    role: "menu",
    outline: "none"
  }, children);
});
Menu.Item = _MenuItem["default"];
Menu.Divider = _MenuDivider["default"];
Menu.Group = _MenuGroup["default"];
Menu.Divider = _MenuDivider["default"];
Menu.Group = _MenuGroup["default"];
Menu.Option = _MenuOption["default"];
Menu.OptionsGroup = _MenuOptionsGroup["default"];
Menu.propTypes = {
  /**
   * The children of the component.
   */
  children: _propTypes["default"].node
};
var _default = Menu;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,