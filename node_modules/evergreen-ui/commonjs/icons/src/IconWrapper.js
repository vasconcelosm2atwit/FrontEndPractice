"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconWrapper = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactIs = _interopRequireDefault(require("react-is"));

var _uiBox = _interopRequireDefault(require("ui-box"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * This is an internal helper component for rendering custom or Evergreen icons
 * Box props are applied to the outer Box container, and Evergreen icon-specific props are added to the icon element.
 */
var IconWrapper = (0, _react.memo)((0, _react.forwardRef)(function Icon(_ref, ref) {
  var icon = _ref.icon,
      color = _ref.color,
      size = _ref.size,
      title = _ref.title,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["icon", "color", "size", "title"]);

  if (!icon || typeof icon === 'string') {
    return null;
  }

  var iconProps = {
    color: color,
    size: size,
    title: title
  };
  var iconWithProps = null;

  if (_reactIs["default"].isValidElementType(icon)) {
    var Component = icon;
    iconWithProps = _react["default"].createElement(Component, (0, _extends2["default"])({
      ref: ref
    }, iconProps));
  } else if (_react["default"].isValidElement(icon)) {
    iconWithProps = _react["default"].cloneElement(icon, _objectSpread(_objectSpread(_objectSpread({}, iconProps), icon.props), {}, {
      ref: ref
    }));
  }

  return _react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    display: "inline-flex"
  }, props), iconWithProps);
}));
exports.IconWrapper = IconWrapper;
IconWrapper.propTypes = {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: _propTypes["default"].string,

  /**
   * The icon component - whether an Evergreen icon or a custom icon node:
   *
   * - If `null` or `undefined` or `false`, this component will render nothing.
   * - If given a `JSX.Element`, that element will be rendered, with size/color/title props cloned into it
   * - If given a React element type, it will be rendered with the other icon props
   *   As a consumer, you should never use `<IconWrapper icon={<element />}` directly; simply render `<element />` instead.
   */
  icon: _propTypes["default"].oneOfType([_propTypes["default"].elementType, _propTypes["default"].element]),

  /**
   * Size of the icon, in pixels.
   * Icons contains 16px and 20px SVG icon paths,
   * and chooses the appropriate resolution based on this prop.
   */
  size: _propTypes["default"].number,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: _propTypes["default"].string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29ucy9zcmMvSWNvbldyYXBwZXIuanMiXSwibmFtZXMiOlsiSWNvbldyYXBwZXIiLCJJY29uIiwicmVmIiwiaWNvbiIsImNvbG9yIiwic2l6ZSIsInRpdGxlIiwicHJvcHMiLCJpY29uUHJvcHMiLCJpY29uV2l0aFByb3BzIiwiUmVhY3RJcyIsImlzVmFsaWRFbGVtZW50VHlwZSIsIkNvbXBvbmVudCIsIlJlYWN0IiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJvbmVPZlR5cGUiLCJlbGVtZW50VHlwZSIsImVsZW1lbnQiLCJudW1iZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBOzs7O0FBSU8sSUFBTUEsV0FBVyxHQUFHLGlCQUN6Qix1QkFBVyxTQUFTQyxJQUFULE9BRVRDLEdBRlMsRUFHVDtBQUFBLE1BRkVDLElBRUYsUUFGRUEsSUFFRjtBQUFBLE1BRlFDLEtBRVIsUUFGUUEsS0FFUjtBQUFBLE1BRmVDLElBRWYsUUFGZUEsSUFFZjtBQUFBLE1BRnFCQyxLQUVyQixRQUZxQkEsS0FFckI7QUFBQSxNQUYrQkMsS0FFL0I7O0FBQ0EsTUFBSSxDQUFDSixJQUFELElBQVMsT0FBT0EsSUFBUCxLQUFnQixRQUE3QixFQUF1QztBQUNyQyxXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFNSyxTQUFTLEdBQUc7QUFDaEJKLElBQUFBLEtBQUssRUFBTEEsS0FEZ0I7QUFFaEJDLElBQUFBLElBQUksRUFBSkEsSUFGZ0I7QUFHaEJDLElBQUFBLEtBQUssRUFBTEE7QUFIZ0IsR0FBbEI7QUFNQSxNQUFJRyxhQUFhLEdBQUcsSUFBcEI7O0FBQ0EsTUFBSUMsb0JBQVFDLGtCQUFSLENBQTJCUixJQUEzQixDQUFKLEVBQXNDO0FBQ3BDLFFBQU1TLFNBQVMsR0FBR1QsSUFBbEI7QUFDQU0sSUFBQUEsYUFBYSxHQUFHLGdDQUFDLFNBQUQ7QUFBVyxNQUFBLEdBQUcsRUFBRVA7QUFBaEIsT0FBeUJNLFNBQXpCLEVBQWhCO0FBQ0QsR0FIRCxNQUdPLElBQUlLLGtCQUFNQyxjQUFOLENBQXFCWCxJQUFyQixDQUFKLEVBQWdDO0FBQ3JDTSxJQUFBQSxhQUFhLEdBQUdJLGtCQUFNRSxZQUFOLENBQW1CWixJQUFuQixnREFBOEJLLFNBQTlCLEdBQTRDTCxJQUFJLENBQUNJLEtBQWpEO0FBQXdETCxNQUFBQSxHQUFHLEVBQUhBO0FBQXhELE9BQWhCO0FBQ0Q7O0FBRUQsU0FDRSxnQ0FBQyxpQkFBRDtBQUFLLElBQUEsT0FBTyxFQUFDO0FBQWIsS0FBK0JLLEtBQS9CLEdBQ0dFLGFBREgsQ0FERjtBQUtELENBM0JELENBRHlCLENBQXBCOztBQStCUFQsV0FBVyxDQUFDZ0IsU0FBWixHQUF3QjtBQUN0Qjs7O0FBR0FaLEVBQUFBLEtBQUssRUFBRWEsc0JBQVVDLE1BSks7O0FBTXRCOzs7Ozs7OztBQVFBZixFQUFBQSxJQUFJLEVBQUVjLHNCQUFVRSxTQUFWLENBQW9CLENBQUNGLHNCQUFVRyxXQUFYLEVBQXdCSCxzQkFBVUksT0FBbEMsQ0FBcEIsQ0FkZ0I7O0FBZ0J0Qjs7Ozs7QUFLQWhCLEVBQUFBLElBQUksRUFBRVksc0JBQVVLLE1BckJNOztBQXVCdEI7Ozs7OztBQU1BaEIsRUFBQUEsS0FBSyxFQUFFVyxzQkFBVUM7QUE3QkssQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IFJlYWN0SXMgZnJvbSAncmVhY3QtaXMnXG5pbXBvcnQgQm94IGZyb20gJ3VpLWJveCdcblxuLyoqXG4gKiBUaGlzIGlzIGFuIGludGVybmFsIGhlbHBlciBjb21wb25lbnQgZm9yIHJlbmRlcmluZyBjdXN0b20gb3IgRXZlcmdyZWVuIGljb25zXG4gKiBCb3ggcHJvcHMgYXJlIGFwcGxpZWQgdG8gdGhlIG91dGVyIEJveCBjb250YWluZXIsIGFuZCBFdmVyZ3JlZW4gaWNvbi1zcGVjaWZpYyBwcm9wcyBhcmUgYWRkZWQgdG8gdGhlIGljb24gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IEljb25XcmFwcGVyID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uKFxuICAgIHsgaWNvbiwgY29sb3IsIHNpemUsIHRpdGxlLCAuLi5wcm9wcyB9LFxuICAgIHJlZlxuICApIHtcbiAgICBpZiAoIWljb24gfHwgdHlwZW9mIGljb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGljb25Qcm9wcyA9IHtcbiAgICAgIGNvbG9yLFxuICAgICAgc2l6ZSxcbiAgICAgIHRpdGxlLFxuICAgIH1cblxuICAgIGxldCBpY29uV2l0aFByb3BzID0gbnVsbFxuICAgIGlmIChSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShpY29uKSkge1xuICAgICAgY29uc3QgQ29tcG9uZW50ID0gaWNvblxuICAgICAgaWNvbldpdGhQcm9wcyA9IDxDb21wb25lbnQgcmVmPXtyZWZ9IHsuLi5pY29uUHJvcHN9IC8+XG4gICAgfSBlbHNlIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChpY29uKSkge1xuICAgICAgaWNvbldpdGhQcm9wcyA9IFJlYWN0LmNsb25lRWxlbWVudChpY29uLCB7IC4uLmljb25Qcm9wcywgLi4uaWNvbi5wcm9wcywgcmVmIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggZGlzcGxheT1cImlubGluZS1mbGV4XCIgey4uLnByb3BzfT5cbiAgICAgICAge2ljb25XaXRoUHJvcHN9XG4gICAgICA8L0JveD5cbiAgICApXG4gIH0pXG4pXG5cbkljb25XcmFwcGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbG9yIG9mIGljb24uIEVxdWl2YWxlbnQgdG8gc2V0dGluZyBDU1MgYGZpbGxgIHByb3BlcnR5LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIGNvbXBvbmVudCAtIHdoZXRoZXIgYW4gRXZlcmdyZWVuIGljb24gb3IgYSBjdXN0b20gaWNvbiBub2RlOlxuICAgKlxuICAgKiAtIElmIGBudWxsYCBvciBgdW5kZWZpbmVkYCBvciBgZmFsc2VgLCB0aGlzIGNvbXBvbmVudCB3aWxsIHJlbmRlciBub3RoaW5nLlxuICAgKiAtIElmIGdpdmVuIGEgYEpTWC5FbGVtZW50YCwgdGhhdCBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQsIHdpdGggc2l6ZS9jb2xvci90aXRsZSBwcm9wcyBjbG9uZWQgaW50byBpdFxuICAgKiAtIElmIGdpdmVuIGEgUmVhY3QgZWxlbWVudCB0eXBlLCBpdCB3aWxsIGJlIHJlbmRlcmVkIHdpdGggdGhlIG90aGVyIGljb24gcHJvcHNcbiAgICogICBBcyBhIGNvbnN1bWVyLCB5b3Ugc2hvdWxkIG5ldmVyIHVzZSBgPEljb25XcmFwcGVyIGljb249ezxlbGVtZW50IC8+fWAgZGlyZWN0bHk7IHNpbXBseSByZW5kZXIgYDxlbGVtZW50IC8+YCBpbnN0ZWFkLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZWxlbWVudF0pLFxuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBpY29uLCBpbiBwaXhlbHMuXG4gICAqIEljb25zIGNvbnRhaW5zIDE2cHggYW5kIDIwcHggU1ZHIGljb24gcGF0aHMsXG4gICAqIGFuZCBjaG9vc2VzIHRoZSBhcHByb3ByaWF0ZSByZXNvbHV0aW9uIGJhc2VkIG9uIHRoaXMgcHJvcC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIHN0cmluZy5cbiAgICogQnJvd3NlcnMgdXN1YWxseSByZW5kZXIgdGhpcyBhcyBhIHRvb2x0aXAgb24gaG92ZXIsIHdoZXJlYXMgc2NyZWVuXG4gICAqIHJlYWRlcnMgd2lsbCB1c2UgaXQgZm9yIGF1cmFsIGZlZWRiYWNrLlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGlzIHNldCB0byB0aGUgaWNvbidzIG5hbWUgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZ1xufVxuIl19